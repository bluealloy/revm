{
    "tests/homestead/coverage/test_coverage.py::test_coverage[fork_Prague-state_test]": {
        "env": {
            "currentCoinbase": "0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba",
            "currentGasLimit": "0x016345785d8a0000",
            "currentNumber": "0x01",
            "currentTimestamp": "0x03e8",
            "currentRandom": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "currentDifficulty": "0x00",
            "currentBaseFee": "0x07",
            "currentExcessBlobGas": "0x00"
        },
        "pre": {
            "0x0000000000000000000000000000000000001000": {
                "nonce": "0x01",
                "balance": "0x00",
                "code": "0x600060011b600060011c600a600b600c600d600e9080815f61010262010203630102030460015060046010600039",
                "storage": {}
            },
            "0x0000000000000000000000000000000000001100": {
                "nonce": "0x01",
                "balance": "0x0de0b6b3a7640000",
                "code": "0x600060006000600060006110005af160005260206000f3",
                "storage": {}
            },
            "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b": {
                "nonce": "0x00",
                "balance": "0x6124fee993bc0000",
                "code": "0x",
                "storage": {}
            }
        },
        "transaction": {
            "nonce": "0x00",
            "maxPriorityFeePerGas": "0x05",
            "maxFeePerGas": "0x0a",
            "gasLimit": [
                "0x0186a0"
            ],
            "to": "0x0000000000000000000000000000000000001100",
            "value": [
                "0x00"
            ],
            "data": [
                "0x"
            ],
            "accessLists": [
                []
            ],
            "sender": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
            "secretKey": "0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
        },
        "post": {
            "Prague": [
                {
                    "hash": "0x8e183b0fe366af1c21333f7be7a1cb5a40e5ddd02780fb388793bcef40f1dac9",
                    "logs": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                    "txbytes": "0x02f8630180050a830186a09400000000000000000000000000000000000011008080c080a08f7a97fc84c20df70553febefc9f95ca6e508163e7a2896b7c08f62bd5343cc2a05879b2fb80033d28fa5e112066bacc62d200a299a21e1b93ea1abc759f307b53",
                    "indexes": {
                        "data": 0,
                        "gas": 0,
                        "value": 0
                    }
                }
            ]
        },
        "_info": {
            "hash": "0x187dfacb6c0538cde78a0aa9d81267a261b5ce343fc895bad76b29c5824c1ff4",
            "comment": "`execution-spec-tests` generated test",
            "filling-transition-tool": "ethereum-spec-evm-resolver 0.0.1",
            "description": "Test function documentation:\n\n    This test covers gaps that result from transforming Yul code into\n    `ethereum_test_tools.vm.opcode.Opcodes` bytecode.\n\n    E.g. Yul tends to optimize stack items by using `SWAP1` and `DUP1` opcodes, which are not\n    regularly used in python code.\n\n    Modify this test to cover more Yul code if required in the future.",
            "url": "https://github.com/ethereum/execution-spec-tests/blob/pectra-devnet-5@v1.0.0/tests/homestead/coverage/test_coverage.py#L15",
            "fixture_format": "state_test"
        }
    }
}