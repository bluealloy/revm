[package]
name = "revm-precompile"
description = "Revm Precompiles - Ethereum compatible precompiled contracts"
version = "20.0.0"
authors.workspace = true
edition.workspace = true
keywords.workspace = true
license.workspace = true
repository.workspace = true
readme.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints]
workspace = true

[dependencies]
# revm
primitives.workspace = true

# static precompile sets.
once_cell = { workspace = true, features = ["alloc"] }

# ecRecover
k256 = { workspace = true, features = ["ecdsa"] }
secp256k1 = { workspace = true, features = [
	"alloc",
	"recovery",
	"rand",
	"global-context",
], optional = true }
libsecp256k1 = { workspace = true, features = [
	"static-context",
], optional = true }

# SHA2-256 and RIPEMD-160
sha2.workspace = true
ripemd.workspace = true

# modexp
aurora-engine-modexp.workspace = true

# Optionally use substrate implementation for eip1962
bn = { workspace = true, optional = true }

# Use arkworks implementation for eip1962
ark-bn254 = { workspace = true, features = ["curve"] }
ark-ec = { workspace = true }
ark-ff = { workspace = true, features = ["asm"] }
ark-serialize = { workspace = true }

# KZG point evaluation precompile
c-kzg = { workspace = true, optional = true, features = [
	"ethereum_kzg_settings",
] }

# Optionally use `kzg-rs` for a pure Rust implementation of KZG point evaluation.
kzg-rs = { workspace = true, optional = true }

# Use the BLS12-381 implementation of blst for EIP2537
blst = { workspace = true, optional = true }

# Use the BLS12-381 implementation of arkworks for EIP2537
ark-bls12-381 = { workspace = true, features = ["curve"] }

# p256verify precompile
p256 = { workspace = true, optional = true, features = ["ecdsa"] }

# utils
cfg-if.workspace = true

[dev-dependencies]
criterion.workspace = true
rand = { workspace = true, features = ["std"] }
rstest.workspace = true

[features]
default = ["std", "c-kzg", "secp256k1", "portable", "blst"]
std = [
	"primitives/std",
	"k256/std",
	"once_cell/std",
	"ripemd/std",
	"sha2/std",
	"c-kzg?/std",
	"secp256k1?/std",
	"libsecp256k1?/std",
	"aurora-engine-modexp/std",
	"p256?/std",
	"ark-bn254/std",
	"ark-bls12-381/std",
	"ark-ec/std",
	"ark-ff/std",
	"ark-serialize/std",
]
hashbrown = ["primitives/hashbrown"]
asm-keccak = ["primitives/asm-keccak"]

# Enables the p256verify precompile.
secp256r1 = ["dep:p256"]

# These libraries may not work on all no_std platforms as they depend on C.

# Enables the KZG point evaluation precompile.
c-kzg = ["dep:c-kzg"]
# `kzg-rs` is not audited but useful for `no_std` environment, use it with causing and default to `c-kzg` if possible.
kzg-rs = ["dep:kzg-rs"]

# Compile in portable mode, without ISA extensions.
# Binary can be executed on all systems.
portable = ["c-kzg?/portable", "blst?/portable"]

# Use `secp256k1` as a faster alternative to `k256`.
# The problem that `secp256k1` has is it fails to build for `wasm` target on Windows and Mac as it is c lib.
# In Linux it passes. If you don't require to build wasm on win/mac, it is safe to use it and it is enabled by default.
secp256k1 = ["dep:secp256k1"]
libsecp256k1 = ["dep:libsecp256k1"]

# Enables the blst implementation of the BLS12-381 precompile.
blst = ["dep:blst"]

# Enables the substrate implementation of eip1962
bn = ["dep:bn"]

[[bench]]
name = "bench"
path = "benches/bench.rs"
harness = false
required-features = ["secp256k1"]
